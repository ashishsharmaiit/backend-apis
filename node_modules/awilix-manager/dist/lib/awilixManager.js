"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.asyncDispose = exports.getWithTags = exports.eagerInject = exports.asyncInit = exports.AwilixManager = void 0;
class AwilixManager {
    config;
    constructor(config) {
        this.config = config;
    }
    async executeInit() {
        if (this.config.eagerInject) {
            eagerInject(this.config.diContainer);
        }
        if (this.config.asyncInit) {
            await asyncInit(this.config.diContainer);
        }
    }
    async executeDispose() {
        await asyncDispose(this.config.diContainer);
    }
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    getWithTags(diContainer, tags) {
        return getWithTags(diContainer, tags);
    }
}
exports.AwilixManager = AwilixManager;
async function asyncInit(diContainer) {
    const dependenciesWithAsyncInit = Object.entries(diContainer.registrations)
        .filter((entry) => {
        return entry[1].asyncInit && entry[1].enabled !== false;
    })
        .sort((entry1, entry2) => {
        const [key1, resolver1] = entry1;
        const [key2, resolver2] = entry2;
        const asyncInitPriority1 = resolver1.asyncInitPriority ?? 1;
        const asyncInitPriority2 = resolver2.asyncInitPriority ?? 1;
        if (asyncInitPriority1 !== asyncInitPriority2) {
            return asyncInitPriority1 - asyncInitPriority2;
        }
        return key1.localeCompare(key2);
    });
    for (const entry of dependenciesWithAsyncInit) {
        const resolvedValue = diContainer.resolve(entry[0]);
        if (entry[1].asyncInit === true) {
            await resolvedValue.asyncInit(diContainer.cradle);
        }
        else {
            // @ts-ignore
            await resolvedValue[entry[1].asyncInit](diContainer.cradle);
        }
    }
}
exports.asyncInit = asyncInit;
function eagerInject(diContainer) {
    const dependenciesWithEagerInject = Object.entries(diContainer.registrations).filter((entry) => {
        return entry[1].eagerInject && entry[1].enabled !== false;
    });
    for (const entry of dependenciesWithEagerInject) {
        const resolvedComponent = diContainer.resolve(entry[0]);
        if (typeof entry[1].eagerInject === 'string') {
            resolvedComponent[entry[1].eagerInject]();
        }
    }
}
exports.eagerInject = eagerInject;
// eslint-disable-next-line @typescript-eslint/no-explicit-any
function getWithTags(diContainer, tags) {
    const dependenciesWithTags = Object.entries(diContainer.registrations).filter((entry) => {
        return (entry[1].enabled !== false && tags.every((v) => entry[1].tags && entry[1].tags.includes(v)));
    });
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    const resolvedComponents = {};
    for (const entry of dependenciesWithTags) {
        resolvedComponents[entry[0]] = diContainer.resolve(entry[0]);
    }
    return resolvedComponents;
}
exports.getWithTags = getWithTags;
async function asyncDispose(diContainer) {
    const dependenciesWithAsyncDispose = Object.entries(diContainer.registrations)
        .filter((entry) => {
        return entry[1].asyncDispose && entry[1].enabled !== false;
    })
        .sort((entry1, entry2) => {
        const [key1, resolver1] = entry1;
        const [key2, resolver2] = entry2;
        const asyncDisposePriority1 = resolver1.asyncDisposePriority ?? 1;
        const asyncDisposePriority2 = resolver2.asyncDisposePriority ?? 1;
        if (asyncDisposePriority1 !== asyncDisposePriority2) {
            return asyncDisposePriority1 - asyncDisposePriority2;
        }
        return key1.localeCompare(key2);
    });
    for (const entry of dependenciesWithAsyncDispose) {
        const resolvedValue = diContainer.resolve(entry[0]);
        const asyncDispose = entry[1].asyncDispose;
        if (typeof asyncDispose === 'function') {
            await asyncDispose(resolvedValue);
            continue;
        }
        if (asyncDispose === true) {
            await resolvedValue.asyncDispose();
            continue;
        }
        // assume it's a string
        {
            // @ts-ignore
            await resolvedValue[asyncDispose]();
        }
    }
}
exports.asyncDispose = asyncDispose;
