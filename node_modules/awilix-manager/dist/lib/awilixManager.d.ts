import type { AwilixContainer } from 'awilix';
declare module 'awilix' {
    interface ResolverOptions<T> {
        asyncInit?: boolean | string;
        asyncInitPriority?: number;
        asyncDispose?: boolean | string | ((instance: T) => Promise<unknown>);
        asyncDisposePriority?: number;
        eagerInject?: boolean | string;
        tags?: string[];
        enabled?: boolean;
    }
}
export type AwilixManagerConfig = {
    diContainer: AwilixContainer;
    asyncInit?: boolean;
    asyncDispose?: boolean;
    eagerInject?: boolean;
};
export declare class AwilixManager {
    readonly config: AwilixManagerConfig;
    constructor(config: AwilixManagerConfig);
    executeInit(): Promise<void>;
    executeDispose(): Promise<void>;
    getWithTags(diContainer: AwilixContainer, tags: string[]): Record<string, any>;
}
export declare function asyncInit(diContainer: AwilixContainer): Promise<void>;
export declare function eagerInject(diContainer: AwilixContainer): void;
export declare function getWithTags(diContainer: AwilixContainer, tags: string[]): Record<string, any>;
export declare function asyncDispose(diContainer: AwilixContainer): Promise<void>;
